---
// import "@fontsource/cabin";
import "../styles/global.css";
import "astro-breadcrumbs/breadcrumbs.css";
import "react-toastify/dist/ReactToastify.css";
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";
import { ClientRouter, fade, slide } from "astro:transitions";
import type { CollectionEntry } from "astro:content";
import Seo from "../components/Seo.astro";

// import BreadCrumbs from "../components/BreadCrumbs.astro";
import { Breadcrumbs } from "astro-breadcrumbs";
import HeaderMobile from "../components/HeaderMobile.astro";
import { Icon } from "astro-icon/components";
import Logo from "../components/Logo.astro";
import Toastie from "../components/Toastie.tsx";
import { ToastContainer } from "react-toastify";

const currentPath = Astro.url.pathname;
console.log("currentPath is", currentPath);
export interface Props {
  title?: string;
  description?: string;
  image?: string;
  frontmatter?: CollectionEntry<"posts">["data"];
  robots?: string;
}

const {
  title = "Astro Country Music Nation",
  description = "A demo blog for a community of music producers and enthusiasts",
  image = "/images/band.jpg",
  frontmatter,
  robots,
} = Astro.props;
---

<!doctype html>
<html lang="en" class="min-h-screen">
  <head>
    <ClientRouter />
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="icon" type="image/png" href="/heartbeat.png" />
    <link rel="sitemap" href="/sitemap-index.xml" />
    <link href="/pagefind/pagefind-ui.css" rel="stylesheet" />
    <script is:inline src="/pagefind/pagefind-ui.js"></script>
    <meta name="generator" content={Astro.generator} />
    <meta name="description" content={description} />
    <meta name="theme-color" content="#134e4a" />
    <title>{title}</title>

    <Seo
      title={title}
      description={description}
      image={image}
      url={Astro.url}
      frontmatter={frontmatter}
      {robots}
    />

    <!-- <link rel="canonical" href={Astro.url} />
    <meta property="og:type" content="website" />
    <meta property="og:url" content={Astro.url} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={image} />
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={Astro.url} />
    <meta property="twitter:title" content={title} />
    <meta property="twitter:description" content={description} />
    <meta property="twitter:image" content={image} /> -->
  </head>

  <body class="min-h-screen bg-neutral-100 dark:bg-[#061723]">
    <Header />
    <HeaderMobile />
    <main class="min-h-[90vh]">
      <div
        class="ml-auto w-auto h-auto md:w-1/3 p-2 text-xs md:text-base font-semibold
         bg-neutral-100 text-zinc-700 rounded-md dark:text-white dark:bg-[#061723]"
      >
        <Breadcrumbs
          excludeCurrentPage={Astro.url.pathname === "/"}
          customizeLinks={[
            {
              "data-link": "home",
              "aria-label": "Go to the home page",
              text: "Home",
            },
          ]}
          separatorAriaHidden={false}
        >
          <svg
            slot="separator"
            xmlns="http://www.w3.org/2000/svg"
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
            ><polyline points="9 18 15 12 9 6"></polyline>
          </svg>
        </Breadcrumbs>
      </div>
      <div transition:animate={fade({ duration: ".8s" })}>
        <slot />
      </div>
    </main>

    <Footer transition:animate={slide({ duration: ".8s" })} />
  </body>
</html>

<script is:inline>
  const theme = (() => {
    if (typeof localStorage !== "undefined" && localStorage.getItem("theme")) {
      return localStorage.getItem("theme");
    }
    if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
      return "dark";
    }
    return "light";
  })();

  if (theme === "light") {
    document.documentElement.classList.remove("dark");
  } else {
    document.documentElement.classList.add("dark");
  }
  window.localStorage.setItem("theme", theme);
</script>
