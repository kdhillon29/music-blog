---
import BaseHead from "../../components/BaseHead.astro";
import Header from "../../components/Header.astro";
import Footer from "../../components/Footer.astro";
import { SITE_TITLE, SITE_DESCRIPTION } from "../../consts";
import { getCollection, type CollectionEntry } from "astro:content";
import FormattedDate from "../../components/FormattedDate.astro";
import BlogPost from "../../layouts/BlogPost.astro";
import Layout from "../../layouts/Layout.astro";
import H1 from "../../components/H1.astro";
import Main from "../../components/Main.astro";

import PostList from "../../components/PostList.astro";
import CategoryList from "../../components/CategoryList.astro";
import Pagination from "../../components/Pagination.astro";
import { formatBlogPosts } from "../../utils/formatBlogPosts";
import type { Page, PaginateOptions } from "astro";
import type {
  InferGetStaticParamsType,
  InferGetStaticPropsType,
  GetStaticPaths,
  GetStaticPathsOptions,
} from "astro";
// import type { Paginate } from "astro:content";
type Categories = CollectionEntry<"posts">["data"]["categories"];
// export interface Props {
//   page: Page<CollectionEntry<"posts"> & { categories: Categories }>;
// }
export interface Props extends InferGetStaticPropsType<typeof getStaticPaths> {}

export const prerender = true;
// const page = Number(Astro.url.searchParams.get("page")) || 1;
// console.log(page);
// const postsPerPage = Number(import.meta.env.VITE_POSTS_PER_PAGE) || 3;
// const start = postsPerPage * (page - 1);
// const end = start + postsPerPage;

// const posts = await getCollection("posts");
// const posts = allPosts.slice(start, end);
export async function getStaticPaths({ paginate }: GetStaticPathsOptions) {
  const allPosts = await getCollection("posts");
  const filtredPosts = formatBlogPosts(allPosts);

  const allCategories = allPosts.flatMap((post) => post.data.categories);
  const categories = Array.from(new Set(allCategories));

  return paginate(filtredPosts!, {
    pageSize: 4,
    params: { page: "[page]" },
  });
}

const { page } = Astro.props;
console.log("page is", typeof page);
---

<Layout title="Blog|Country Music" description="welcome to country music blog">
  <Main>
    <H1 text="Country Music Blog" />

    <p class="text-zinc-500 text-xl md:text-3xl mb-6 max-sm:mb-3">
      Join the Community and learn from Music Producers and Enthusiasts
    </p>

    <div
      class="grid grid-cols-[auto,1fr] gap-x-14 gap-y-3 mb-16 max-lg:grid-cols-1"
    >
      <CategoryList
        categories={Array.from(
          new Set(page.data.flatMap((post) => post.data.categories))
        )}
        title="Tags"
      />
    </div>

    <div class="mb-6 md:mb-12">
      {
        page?.data?.length! > 0 ? (
          <PostList posts={page.data as CollectionEntry<"posts">[]} />
        ) : (
          <p>No posts were found with that tag</p>
        )
      }
    </div>
    <div class="flex justify-between items-center">
      {
        page.url.prev && (
          <a
            class="bg-teal-900 text-white py-3 px-6 rounded-xl text-xl "
            href={page.url.prev}
          >
            Previous Page
          </a>
        )
      }
      {
        page.url.next && (
          <a
            class="bg-teal-900 text-white py-3 px-6 rounded-xl text-xl ml-auto"
            href={page.url.next}
          >
            Next Page
          </a>
        )
      }
      {
        page.currentPage === page.lastPage && (
          <a
            aria-disabled="true"
            class="bg-teal-900 text-white py-3 px-6 rounded-xl text-xl"
          >
            Last Page
          </a>
        )
      }
    </div>
  </Main>
</Layout>
<!-- <Pagination page={page.currentPage} numberOfPosts={page.total} /> -->
